section .data
    arr1 db '8','7','5'      ; ASCII digits
    arr2 db '7','5','4'
    len equ 3
    newline db 10
    space db " "

section .text
    global _start

_start:
    mov rcx, len
    mov rsi, arr1
    mov rdi, arr2

.loop:
    mov al, [rsi]      ; get arr1 digit
    sub al, '0'        ; convert ASCII â†’ binary
    mov bl, [rdi]
    sub bl, '0'
    add al, bl         ; AL = sum
    aam                ; AH = tens, AL = units

    ; ---- print tens (if non-zero) ----
    cmp ah, 0
    je .print_units
    add ah, '0'
    mov rax, 1
    mov rdi, 1
    lea rsi, [rsp-1]
    push rax
    mov byte [rsp-1], ah
    mov rsi, rsp-1
    mov rdx, 1
    mov rax, 1
    syscall
    pop rax

.print_units:
    add al, '0'
    mov rax, 1
    mov rdi, 1
    lea rsi, [rsp-1]
    push rax
    mov byte [rsp-1], al
    mov rsi, rsp-1
    mov rdx, 1
    mov rax, 1
    syscall
    pop rax

    ; print space
    mov rax, 1
    mov rdi, 1
    mov rsi, space
    mov rdx, 1
    syscall

    inc rsi
    inc rdi
    loop .loop

    ; newline
    mov rax, 1
    mov rdi, 1
    mov rsi, newline
    mov rdx, 1
    syscall

    ; exit
    mov rax, 60
    xor rdi, rdi
    syscall
